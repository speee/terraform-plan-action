name: 'Terraform plan'
description: 'Terraform plan on Pull Request'
inputs:
  working-directory:
    description: 'Directory path of a root module.'
    required: true
    default: '.'
  enable-lock:
    description: 'Boolean string whether state locks to be enabled.'
    default: 'true'
    required: false
outputs:
  plan-stdout:
    description: Plan stdout.
    value: ${{ steps.plan.outputs.stdout }}
  plan-stderr:
    description: Plan stderr.
    value: ${{ steps.plan.outputs.stderr }}
  plan-result:
    description: Plan result without logs during plan.
    value: ${{ steps.plan_result.outputs.result }}
  replace-resources:
    description: JSON strings of resources to be replaced.
    value: ${{ steps.plan_result.outputs.replace-resources }}
  create-resources:
    description: JSON strings of resources to be created.
    value: ${{ steps.plan_result.outputs.create-resources }}
  delete-resources:
    description: JSON strings of resources to be deleted.
    value: ${{ steps.plan_result.outputs.delete-resources }}
  update-resources:
    description: JSON strings of resources to be updated.
    value: ${{ steps.plan_result.outputs.update-resources }}
  plan-has-changes:
    description: A flat indicates that the plan command has changes
    value: ${{ steps.plan-exitcode.outputs.plan-has-changes }}
runs:
  using: composite
  steps:
    - run: terraform fmt -check -recursive
      id: fmt
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
    - run: terraform init
      id: init
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
    - run: terraform validate
      id: validate
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
    - run: |
        set +e
        terraform plan -detailed-exitcode -input=false -lock=${{ inputs.enable-lock }} -out tfplan
        set -e
      id: plan
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
    - name: Read result of Terraform Plan
      id: plan_result
      if: steps.plan.outcome == 'success'
      shell: bash
      run: |
        echo "::set-output name=result::$(terraform show tfplan)"
        terraform show -json tfplan | jq -c '.resource_changes' > tfplan.resource_changes.json
        # Ref: https://www.terraform.io/docs/internals/json-format.html#change-representation
        REPLACE_RESOURCES=$(jq -c '. | map(select(.change.actions | length==2) ) | [.[].address]' < tfplan.resource_changes.json)
        CREATE_RESOURCES=$(jq -c '. | map(select(.change.actions | length==1 and .[0] == "create") ) | [.[].address]' < tfplan.resource_changes.json)
        DELETE_RESOURCES=$(jq -c '. | map(select(.change.actions | length==1 and .[0] == "delete") ) | [.[].address]' < tfplan.resource_changes.json)
        UPDATE_RESOURCES=$(jq -c '. | map(select(.change.actions | length==1 and .[0] == "update") ) | [.[].address]' < tfplan.resource_changes.json)
        echo "::set-output name=replace-resources::${REPLACE_RESOURCES}"
        echo "::set-output name=create-resources::${CREATE_RESOURCES}"
        echo "::set-output name=delete-resources::${DELETE_RESOURCES}"
        echo "::set-output name=update-resources::${UPDATE_RESOURCES}"
      working-directory: "${{ inputs.working-directory }}"
    - run: |
        planExitcode=${{ steps.plan.outputs.exitcode }}
        if [ ${planExitcode} -eq 0 ]; then
          planHasChanges=false
        elif [ ${planExitcode} -eq 2 ]; then
          planHasChanges=true
        else
          exit ${planExitcode}
        fi
        echo ::set-output name=plan-has-changes::${planHasChanges}
      id: plan-exitcode
      working-directory: "${{ inputs.working-directory }}"
      shell: bash
